{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access _artifactsLocation"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location where the resources of this template will be deployed to"
      },
      "defaultValue": "eastus"
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "Photoscan Virtual Network name"
      },
      "defaultValue": "sofs-Vnet"
    },
    "vnetRG": {
      "type": "string",
      "metadata": {
        "description": "Photoscan Vnet Resoure group name"
      }
    },
    "headServerName": {
      "type": "string",
      "defaultValue": "headnode",
      "metadata": {
        "description": "Photoscan Server (head) name."
      }
    },
    "nodeNameSuffix": {
      "type": "string",
      "defaultValue": "workernode",
      "metadata": {
        "description": "Name suffix to be used in the GPU Nodes."
      }
    },
    "nodeCount": {
      "type": "int",
      "metadata": {
        "description": "Number of GPU VM Nodes."
      }
    },
    "storageVnetRG": {
      "type": "string",
      "metadata": {
        "description": "Storage Vnet Resoure group name"
      }
    },
    "storageVnetName": {
      "type": "string",
      "metadata": {
        "description": "Srorage Virtual Network name"
      }
    },
    "deploymentConfig": {
      "type": "object",
      "metadata": {
        "description": "Object that contains library paths, api versions, SAS token, from master template."
      }
    },
    "sharedScracthMountPoint":{
      "type": "string",
      "metadata": {
        "description": "Folder path where Shared Storage volume will be mounted on Linux VMs."
      }
    },
    "nfsScratchExportPath": {
      "type": "string",
      "metadata": {
        "description": "If useNfsStorage is set to 'yes', this parameter with correct values is mandatory. This is the export path configured in your NFS server to be used by Photoscan for project processing."
      },
      "defaultValue": "/data"
    },
    "nfsMapDriveLetter": {
      "type": "string",
      "metadata": {
        "description": "Drive letter where nfsExportPathUNC will be mapped to."
      }
    },
    "nfsExportPathUNC" :{
      "type": "string",
      "metadata": {
        "description": "UNC NFS Export path. E.g. \\\\vfxt\\!\\msazure"
      }
    },
    "nfsMountType": {
      "type": "string",
      "metadata": {
        "description": "Type of NFS mounts, hard or soft."
      },
      "allowedValues": [
        "hard",
        "soft"
      ],
      "defaultValue": "hard"
    },
    "sharedNfsStorageHpcUserHomeFolder": {
      "type": "string",
      "metadata": {
        "description": "This indicates shared storage mount point on Linux VM nodes for the hpcuser home folder, it will mounted on all Linux nodes."
      }
    },
    "homeNfsExportPath": {
      "type": "string",
      "metadata": {
        "description": "If useNfsStorage is set to 'yes', this parameter with correct values is mandatory. This is the export path configured in your NFS server for home folder of HPC User."
      },
      "defaultValue": "/home"
    },
    "nfsScratchFolderNfsVersion": {
      "type": "string",
      "metadata": {
        "description": "NFS Version used to mount scratch (data) folder. Will be used only when NFS storage is in use."
      },
      "defaultValue": "nfs",
      "allowedValues": [
        "nfs",
        "nfs4"
      ]
    },
    "nfsHomeFolderNfsVersion": {
      "type": "string",
      "metadata": {
        "description": "NFS Version used to mount home folder for HPC User. When using BeeGFS, this value must be nfs4, if using Avere vFXT it must be nfs."
      },
      "defaultValue": "nfs",
      "allowedValues": [
        "nfs",
        "nfs4"
      ]
    },
    "nfsScratchMountOptions": {
      "type": "string",
      "metadata": {
        "description": "NFS scracth volumne mount options, comma separated, no spaces. E.g. noatime,rsize=524288,wsize=524288."
      },
      "defaultValue": "defaults"
    },
    "nfsCaseSensitiveLookup":{
      "type": "bool",
      "metadata": {
        "description": "Sets that NFS will use case sensitive lookups."
      },
      "defaultValue": false
    },
    "nfsTimeout":{
      "type": "int",
      "metadata": {
        "description": "NFS timeout."
      },
      "defaultValue": 60,
      "maxValue": 60
    },
    "nfsMountRetry":{
      "type": "int",
      "metadata": {
        "description": "NFS mount retries."
      },
      "defaultValue": 3
    },
    "nfsDefaultAccessMode":{
      "type": "int",
      "metadata": {
        "description": "NFS default access mode."
      },
      "defaultValue": 777
    },
    "nfsWindowsRsizeKb":{
      "type": "int",
      "metadata": {
        "description": "Windows NFS Client read size in KB."
      },
      "defaultValue": 64,
      "maxValue": 64
    },
    "nfsWindowsWsizeKb":{
      "type": "int",
      "metadata": {
        "description": "Windows NFS Client write size in KB."
      },
      "defaultValue": 64,
      "maxValue": 64
    },
    "nfsDnsEntry": {
      "type": "string",
      "metadata": {
        "description": "Format is <DNS A Record for NFS servers>,<IP1>,<IP2>,<IP3>,<IPx>. E.g. vfxt,10.0.0.11,10.0.0.12,10.0.0.13. This parameter is split and host Host name is used."
      }
    },
    "hpcUser": {
      "type": "string",
      "metadata": {
        "description": "Hpc user that will be owner of all files in the hpc folder structure."
      }
    },
    "hpcUid": {
      "type": "int",
      "metadata": {
        "description": "Hpc User ID."
      }
    },
    "hpcGroup": {
      "type": "string",
      "metadata": {
        "description": "Hpc Group."
      }
    },
    "hpcGid": {
      "type": "int",
      "metadata": {
        "description": "Hpc Group ID."
      }
    }
  },
  "variables": {
    "nfsHostName":"[split(parameters('nfsDnsEntry'),',')[0]]",
    "deploymentUniqueString": "[uniqueString(concat(deployment().name,resourceGroup().id))]",
    "peering1Name": "[concat(parameters('vnetName'),'-peerto-',parameters('storageVnetName'))]",
    "peering2Name": "[concat(parameters('storageVnetName'),'-peerto-',parameters('vnetName'))]",
    "installParams": "[concat(' -NfsMapDriveLetter ', parameters('nfsMapDriveLetter'), ' -NfsExportPathUNC ', parameters('nfsExportPathUNC'), ' -HpcUserID ', parameters('hpcUid'), ' -HpcGroupID ', parameters('hpcGid'), ' -MountType ', parameters('nfsMountType'), ' -CaseSensitiveLookup ', parameters('nfsCaseSensitiveLookup'), ' -Timeout ', parameters('nfsTimeout') , ' -MountRetry ', parameters('nfsMountRetry') , ' -DefaultAccessMode ', parameters('nfsDefaultAccessMode') , ' -RSizeKB ', parameters('nfsWindowsRsizeKb') , ' -WSizeKB ', parameters('nfsWindowsWsizeKb'))]",
    "linuxInstallParams": "[concat(variables('nfsHostName'),' ', parameters('nfsScratchExportPath'), ' ', parameters('sharedScracthMountPoint'), ' ', parameters('homeNfsExportPath'), ' ', parameters('sharedNfsStorageHpcUserHomeFolder'), ' ', parameters('nfsScratchFolderNfsVersion'), ' ', parameters('nfsHomeFolderNfsVersion'), ' ', parameters('nfsScratchMountOptions'),' ', parameters('hpcUser'), ' ',  parameters('hpcGroup'))]",
    "nodeVMsList": {
      "copy": [
        {
          "name": "items",
          "count": "[parameters('nodeCount')]",
          "input": {
            "name": "[concat(parameters('nodeNameSuffix'),'-',copyIndex('items',1))]"
          }
        }
      ]
    }
  },
  "resources": [
    {
      "condition": true,
      "comments": "Vnet Peering from Photoscan Vnet to NFS Storage vnet",
      "name": "[concat(variables('deploymentUniqueString'),'-Peering1-PeeringDeployment')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[parameters('vnetRG')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "name": "[concat(parameters('vnetName'),'/',variables('peering1Name'))]",
              "apiVersion": "[parameters('deploymentConfig').apiVersions.vnetPeeringApiVersion]",
              "location": "[parameters('location')]",
              "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "false",
                "allowGatewayTransit": "false",
                "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                  "id": "[resourceId(parameters('storageVnetRG'),'Microsoft.Network/virtualNetworks',parameters('storageVnetName'))]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "condition": true,
      "comments": "Vnet Peering from NFS vnet to Photoscan Vnet",
      "name": "[concat(variables('deploymentUniqueString'),'-Peering2-PeeringDeployment')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[parameters('storageVnetRG')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "name": "[concat(parameters('storageVnetName'),'/',variables('peering2Name'))]",
              "apiVersion": "[parameters('deploymentConfig').apiVersions.vnetPeeringApiVersion]",
              "location": "[parameters('location')]",
              "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "false",
                "allowGatewayTransit": "false",
                "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                  "id": "[resourceId(parameters('vnetRG'),'Microsoft.Network/virtualNetworks',parameters('vnetName'))]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "condition": true,
      "comments": "CustomScript extension execution to configure Photoscan Scheduler (head)",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('headServerName'),'/CustomScript')]",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.vmExtensionApiVersion]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat(variables('deploymentUniqueString'),'-Peering2-PeeringDeployment')]",
        "[concat(variables('deploymentUniqueString'),'-Peering1-PeeringDeployment')]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('_artifactsLocation'),'/scripts/install_nfs_based_storage_config.ps1', parameters('_artifactsLocationSasToken'))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./scripts/install_nfs_based_storage_config.ps1',' ', variables('installParams'))]"
        }
      }
    },
    {
      "condition": true,
      "comments": "CustomScript extension execution NFS client on photoscan Linux Nodes",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('nodeVMsList').items[copyIndex()].name,'/CustomScript')]",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.vmExtensionApiVersion]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat(variables('deploymentUniqueString'),'-Peering2-PeeringDeployment')]",
        "[concat(variables('deploymentUniqueString'),'-Peering1-PeeringDeployment')]"
      ],
      "copy": {
        "name": "vmLinuxCustomScriptCopy",
        "count": "[length(variables('nodeVMsList').items)]"
      },
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('_artifactsLocation'), '/scripts/install_nfs_based_storage_config.sh', parameters('_artifactsLocationSasToken'))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('bash install_nfs_based_storage_config.sh ', variables('linuxInstallParams'))]"
        }
      }
    }
  ],
  "outputs": {}
}