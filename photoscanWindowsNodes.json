{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access _artifactsLocation"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location where the resources of this template will be deployed to"
      },
      "defaultValue": "eastus"
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network name"
      }
    },
    "dnsDomainName": {
      "type": "string",
      "defaultValue": "sofstest.local",
      "metadata": {
        "description": "DNS domain name use to build the host's FQDN."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Name of admin account of the VMs, this name cannot be well know names, like root, admin, administrator, guest, etc."
      }
    },
    "vnetRG": {
      "type": "string",
      "metadata": {
        "description": "Resoure group name where the virtual network is located."
      }
    },
    "photoscanSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Subnet where Photoscan servers will be deployed to"
      },
      "defaultValue": "Photoscan-SN"
    },
    "deploymentConfig": {
      "type": "object",
      "metadata": {
        "description": "Object that contains library paths, api versions, SAS token, from master template."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Domain Administrator password"
      }
    },
    "activationCode": {
      "type": "securestring",
      "metadata": {
        "description": "Photoscan Activation Code."
      }
    },
    "nodeNameSuffix": {
      "type": "string",
      "defaultValue": "workernode",
      "metadata": {
        "description": "Name suffix to be used in the GPU Nodes."
      }
    },
    "nodeRoot": {
      "type": "string",
      "metadata": {
        "description": "Root path where the projects are located."
      }
    },
    "nodeSubnetIpAddressSuffix": {
      "type": "string",
      "metadata": {
        "description": "Nodes will have static Ip addresses, this is the network part of a class C subnet."
      }
    },
    "nodeStartIpAddress": {
      "type": "int",
      "defaultValue": 20,
      "metadata": {
        "description": "Nodes will have static Ip addresses, this is the start number of the host part of the class C ip address."
      }
    },
    "dispatch": {
      "type": "string",
      "metadata": {
        "description": "Ip address of the photoscan server (head)."
      }
    },
    "gpuMask": {
      "type": "int",
      "metadata": {
        "description": "Decimal represention of how many GPUs will be enabled for processing. E.g. 15 means 1111, that is equal to 4 GPUs."
      }
    },
    "nodeVmSize": {
      "type": "string",
      "metadata": {
        "description": "GPU VM Size."
      }
    },
    "nodeCount": {
      "type": "int",
      "metadata": {
        "description": "Number of GPU VM Nodes."
      }
    },
    "windowsPhotoscanDownloadUrl":{
      "type": "string",
      "defaultValue": "http://download.agisoft.com/photoscan-pro_1_4_4_x64.msi",
      "metadata": {
        "description": "Windows binary Photoscan download URL."
      }
    },
    "photoscanAbsolutePaths":{
      "type":"int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        1
      ],
      "metadata": {
        "description": "Use Photoscan absolute paths. 0 = No, 1 = Yes."
      }
    },
    "adDomainNetBIOSName": {
      "type": "string",
      "metadata": {
        "description": "NetBIOS domain name for Active Directory deployment."
      }
    }
  },
  "variables": {
    "deploymentUniqueString": "[uniqueString(concat(deployment().name,resourceGroup().id))]",
    "vnetId": "[resourceId(parameters('vnetRg'),'Microsoft.Network/virtualNetworks',parameters('vnetName'))]",
    "subnetId": "[concat(variables('vnetId'),'/subnets/',parameters('photoscanSubnetName'))]",
    "photoScanRole": "Node",
    "installParams": "[concat(' -ActivationCode ', parameters('activationCode'), ' -Role ', variables('photoScanRole'), ' -Dispatch ', parameters('dispatch'), ' -Root ', parameters('nodeRoot'), ' -AbsolutePaths ', parameters('photoscanAbsolutePaths'), ' -GpuMask ', parameters('gpuMask'), ' -DownloadUrl ',parameters('windowsPhotoscanDownloadUrl'))]",
    "avSetInfo": [
      {
        "availabilitySetName": "WindowsNodes-AvSet",
        "managedDisksAligned": "yes"
      }
    ],
    "faultDomains": 2,
    "updateDomains": 5,
    "managedDisksAligned": "yes",
    "nodesVMsList": {
      "copy": [
        {
          "name": "items",
          "count": "[parameters('nodeCount')]",
          "input": {
            "name": "[concat(parameters('nodeNameSuffix'),'-',copyIndex('items',1))]",
            "storageAccountType": "Premium_LRS",
            "osDiskSizeGB": 128,
            "subnetId": "[variables('subnetId')]",
            "vmSize": "[parameters('nodeVmSize')]",
            "privateIpAddress": "[concat(parameters('nodeSubnetIpAddressSuffix'),'.',add(copyIndex('items',1),parameters('nodeStartIpAddress')))]",
            "availabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets',variables('avSetInfo')[0].availabilitySetName)]",
            "imageInfo": {
              "publisher": "MicrosoftWindowsServer",
              "offer": "WindowsServer",
              "sku": "2016-Datacenter",
              "version":"latest"
            }
          }
        }
      ]
    }
  },
  "resources": [
    {
      "condition": true,
      "comments": "Availability Sets",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSetInfo')[copyIndex()].availabilitySetName]",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.availabilitySetApiVersion]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "avSetCopy",
        "count": "[length(variables('avSetInfo'))]"
      },
      "properties": {
        "platformFaultDomainCount": "[variables('faultDomains')]",
        "platformUpdateDomainCount": "[variables('updateDomains')]"
      },
      "sku": {
        "name": "[if(equals(variables('managedDisksAligned'),'yes'),'Aligned','Classic')]"
      }
    },

    {
      "condition": true,
      "comments": "Windows Nodes deployment",
      "name": "[concat(variables('deploymentUniqueString'),'-',variables('nodesVmsList').items[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.deploymentApiVersion]",
      "copy": {
        "name": "WindowsNodesCopy",
        "count":"[parameters('nodeCount')]"
      },
      "dependsOn": [
        "avSetCopy"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[parameters('deploymentConfig').libraryItems.vmBuildingBlockUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "deploymentUniqueString": {
            "value": "[variables('deploymentUniqueString')]"
          },
          "nicApiVersion": {
            "value": "[parameters('deploymentConfig').apiVersions.nicApiVersion]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "completeVmNameProvided": {
            "value": "yes"
          },
          "vmNamePrefix": {
            "value": "[variables('nodesVmsList').items[copyIndex()].name]"
          },
          "vmSize": {
            "value": "[variables('nodesVmsList').items[copyIndex()].vmSize]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "imageInfo": {
            "value": "[variables('nodesVmsList').items[copyIndex()].imageInfo]"
          },
          "sasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "attachDataDisks": {
            "value": "no"
          },
          "storageAccountType": {
            "value": "[variables('nodesVmsList').items[copyIndex()].storageAccountType]"
          },
          "useAvailabilitySet": {
            "value": "yes"
          },
          "avSetId":{
            "value": "[variables('nodesVmsList').items[copyIndex()].availabilitySetId]"
          },
          "subnetId": {
            "value": "[variables('nodesVmsList').items[copyIndex()].subnetId]"
          },
          "enableAcceleratedNetworking": {
            "value": false
          },
          "usePublicIpAddress": {
            "value": "no"
          },
          "includeVmInAppGwBe": {
            "value": "no"
          },
          "attachNsg": {
            "value": "no"
          },
          "configureDnsServers": {
            "value": "no"
          },
          "privateIpAddressType": {
            "value": "Static"
          },
          "privateIpAddress": {
            "value": "[variables('nodesVmsList').items[copyIndex()].privateIpAddress]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "usePlan": {
            "value": "no"
          }
        }
      }
    },
    {
      "condition": true,
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('nodesVMsList').items[copyIndex()].name,'/NvidiaGpuDriverWindows')]",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.vmExtensionApiVersion]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "WindowsNodesCopy"
      ],
      "copy": {
        "name": "nvidiadriversCopy",
        "count": "[length(variables('nodesVMsList').items)]"
      },
      "properties": {
        "publisher": "Microsoft.HpcCompute",
        "type": "NvidiaGpuDriverWindows",
        "typeHandlerVersion": 1.1,
        "autoUpgradeMinorVersion": true,
        "settings": {}
      }
    },
    {
      "condition": true,
      "comments": "DOMAIN JOIN - Head - Domain joining VMs",
      "name": "[concat(variables('deploymentUniqueString'),'domainJoinWinNodeVm','-',variables('nodesVmsList').items[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[resourceGroup().name]",
      "dependsOn": [
        "nvidiadriversCopy"
      ],
      "copy": {
        "count":"[parameters('nodeCount')]",
        "name": "windowsNodesdomainJoinCopy"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[parameters('deploymentConfig').libraryItems.joinVmToDomainUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "apiVersion": {
            "value": "[parameters('deploymentConfig').apiVersions.vmExtensionApiVersion]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmList": {
            "value": "[variables('nodesVmsList').items[copyIndex()].name]"
          },
          "domainJoinUserName": {
            "value": "[concat(parameters('adDomainNetBIOSName'),'\\',parameters('adminUsername'))]"
          },
          "domainJoinUserPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainFQDN": {
            "value": "[parameters('dnsDomainName')]"
          }
        }
      }
    },
    {
      "condition": true,
      "comments": "Configure Photoscan on Server",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('nodesVmsList').items[copyIndex()].name,'/CustomScript')]",
      "apiVersion": "[parameters('deploymentConfig').apiVersions.vmExtensionApiVersion]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "windowsNodesdomainJoinCopy"
      ],
      "copy": {
        "name":"customScriptCopy",
        "count":"[parameters('nodeCount')]"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('_artifactsLocation'),'/scripts/install_photoscan_windows.ps1', parameters('_artifactsLocationSasToken'))]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./scripts/install_photoscan_windows.ps1',' ', variables('installParams'))]"
        }
      }
    }
  ],
  "outputs": {}
}