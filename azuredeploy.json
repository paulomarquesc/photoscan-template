{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access _artifactsLocation"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location where the resources of this template will be deployed to"
      },
      "defaultValue": "eastus"
    },
    "adminPassword": {
      "type": "string",
      "metadata": {
        "description": "Admin password."
      }
    },
    "useSingleResourceGroup": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Whether or not use multiple resource groups, if using multiple, please change the resource groups manually in the variables section."
      },
      "defaultValue": "yes"
    },
    "activationCode": {
      "type": "securestring",
      "metadata": {
        "description": "Photoscan Activation Code."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Name of admin account of the VMs, this name cannot be well know names, like root, admin, administrator, guest, etc."
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "SSH rsa public key file as a string."
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network Name"
      },
      "defaultValue": "Photoscan-vnet"
    },
    "vnetAdressSpace": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network Address Space"
      },
      "defaultValue": "10.0.0.0/16"
    },
    "jumpboxSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Jumpbox subnet name"
      },
      "defaultValue": "Jumpbox-SN"
    },
    "jumpboxSubnetAdressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Jumpbox subnet address prefix"
      },
      "defaultValue": "10.0.0.0/24"
    },
    "photoscanSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Photoscan servers (Scheduler+Node) subnet name"
      },
      "defaultValue": "Photoscan-SN"
    },
    "photoscanSubnetAdressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Photoscan subnet address prefix."
      },
      "defaultValue": "10.0.1.0/24"
    },
    "adSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Subnet where Domain Controllers will be deployed to"
      },
      "defaultValue": "AD-SN"
    },
    "adSubnetAdressPrefix": {
      "type": "string",
      "metadata": {
        "description": "AD subnet address prefix"
      },
      "defaultValue": "10.0.2.0/24"
    },
    "dc1Name": {
      "type": "string",
      "metadata": {
        "description": "Domain Controller 1 Name"
      },
      "defaultValue": "DC-01"
    },
    "dc2Name": {
      "type": "string",
      "metadata": {
        "description": "Domain Controller 2 Name"
      },
      "defaultValue": "DC-02"
    },
    "dc1IpAddress": {
      "type": "string",
      "metadata": {
        "description": "Domain Controller 1 IP Address"
      },
      "defaultValue": "10.0.2.4"
    },
    "dc2IpAddress": {
      "type": "string",
      "metadata": {
        "description": "Domain Controller 2 IP Address"
      },
      "defaultValue": "10.0.2.5"
    },
    "dcVmSize": {
      "type": "string",
      "metadata": {
        "description": "Domain Controller VM Size."
      },
      "defaultValue": "Standard_DS2_v2"
    },
    "dnsDomainName": {
      "type": "string",
      "metadata": {
        "description": "Active Directory FQDN."
      },
      "defaultValue": "testdomain.local"
    },
    "adDomainNetBIOSName": {
      "type": "string",
      "metadata": {
        "description": "Active Directory NetBIOS domain name."
      },
      "defaultValue": "TESTDOMAIN"
    },
    "deployLinuxJumpbox": {
      "type": "string",
      "metadata": {
        "description": "Should this template deploy a Linux Jumpbox"
      },
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "yes"
    },
    "windowsJumpboxVmName": {
      "type": "string",
      "metadata": {
        "description": "Windows Jumpbox VM Name."
      },
      "defaultValue": "wjb-01"
    },
    "linuxJumpboxVmName": {
      "type": "string",
      "metadata": {
        "description": "Linux Jumpbox VM Name."
      },
      "defaultValue": "ljb-01"
    },
    "windowsJumpboxVmSize": {
      "type": "string",
      "metadata": {
        "description": "Windows Jumpbox VM Size."
      },
      "defaultValue": "Standard_DS2_v2"
    },
    "linuxJumpboxVmSize": {
      "type": "string",
      "metadata": {
        "description": "Linux Jumpbox VM Size."
      },
      "defaultValue": "Standard_DS2_v2"
    },
    "windowsJumpboxIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Windows Jumpbox VM Ip Address."
      },
      "defaultValue": "10.0.0.4"
    },
    "linuxJumpboxIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Linux Jumpbox VM Ip Address."
      },
      "defaultValue": "10.0.0.5"
    },
    "headServerName": {
      "type": "string",
      "defaultValue": "headnode",
      "metadata": {
        "description": "Photoscan Server (head) name."
      }
    },
    "headVmSize": {
      "type": "string",
      "defaultValue": "Standard_D8S_v3",
      "metadata": {
        "description": "Head node VM Size."
      }
    },
    "workerNodesType": {
      "type": "string",
      "defaultValue": "linux",
      "allowedValues": [
        "linux",
        "windows"
      ],
      "metadata": {
        "description": "OS type of worker nodes, Linux or Windows."
      }
    },
    "nodeNameSuffix": {
      "type": "string",
      "defaultValue": "workernode",
      "metadata": {
        "description": "Name suffix to be used in the GPU Nodes."
      }
    },
    "nodeSubnetIpAddressSuffix": {
      "type": "string",
      "metadata": {
        "description": "Nodes will have static Ip addresses, this is the network part of a class C subnet."
      },
      "defaultValue": "10.0.1"
    },
    "nodeStartIpAddress": {
      "type": "int",
      "defaultValue": 20,
      "metadata": {
        "description": "Nodes will have static Ip addresses, this is the start number of the host part of the class C ip address."
      }
    },
    "nodeCount": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Number of GPU VM Nodes."
      }
    },
    "nodeVmSize": {
      "type": "string",
      "defaultValue": "Standard_NC24s_v2",
      "metadata": {
        "description": "GPU VM Size."
      }
    },
    "headRoot": {
      "type": "string",
      "defaultValue": "\\\\beegfs\\beegfsshare\\Projects",
      "metadata": {
        "description": "Root path where the projects are located for Server."
      }
    },
    "nodeRoot": {
      "type": "string",
      "defaultValue": "/beegfs/beegfsshare/Projects",
      "metadata": {
        "description": "Root path where the projects are located for Nodes."
      }
    },
    "dispatch": {
      "type": "string",
      "defaultValue": "10.0.1.250",
      "metadata": {
        "description": "Ip address of the photoscan server (head)."
      }
    },
    "gpuMask": {
      "type": "int",
      "defaultValue": 15,
      "metadata": {
        "description": "Decimal represention of how many GPUs will be enabled for processing. E.g. 15 means 1111, that is equal to 4 GPUs."
      }
    },
    "windowsPhotoscanDownloadUrl": {
      "type": "string",
      "defaultValue": "http://download.agisoft.com/photoscan-pro_1_4_4_x64.msi",
      "metadata": {
        "description": "Windows binary Photoscan download URL."
      }
    },
    "linuxPhotoscanDownloadUrl": {
      "type": "string",
      "defaultValue": "http://download.agisoft.com/photoscan-pro_1_4_4_amd64.tar.gz",
      "metadata": {
        "description": "Photoscan Linux binaries download URL."
      }
    },
    "photoscanInstallPath": {
      "type": "string",
      "metadata": {
        "description": "Photoscan installation path."
      },
      "defaultValue": "/"
    },
    "photoscanAbsolutePaths": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        1
      ],
      "metadata": {
        "description": "Use Photoscan absolute paths. 0 = No, 1= Yes."
      }
    },
    "useNfsStorage": {
      "type": "string",
      "metadata": {
        "description": "Should this template use Nfs storage. If this parameter is set to 'yes', make sure useBeeGfsStorage is set to 'no'"
      },
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "useBeeGfsStorage": {
      "type": "string",
      "metadata": {
        "description": "Should this template use BeeGfs storage. If this parameter is set to 'yes', make sure useNfsStorage is set to 'no'"
      },
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "yes"
    },
    "storageVnetRG": {
      "type": "string",
      "defaultValue": "beegfs-rg-eus",
      "metadata": {
        "description": "Storage Vnet Resoure group name."
      }
    },
    "storageVnetName": {
      "type": "string",
      "defaultValue": "beegfs-vnet",
      "metadata": {
        "description": "Srorage Virtual Network name."
      }
    },
    "sharedNfsStorageHpcUserHomeFolder": {
      "type": "string",
      "defaultValue": "/mnt/beegfshome",
      "metadata": {
        "description": "This indicates shared storage mount point on Linux VM nodes for the hpcuser home folder, it will mounted on all Linux nodes."
      }
    },
    "homeNfsExportPath": {
      "type": "string",
      "metadata": {
        "description": "If useNfsStorage is set to 'yes', this parameter with correct values is mandatory. This is the export path configured in your NFS server for home folder of HPC User."
      },
      "defaultValue": "/home"
    },
    "sharedScracthMountPoint": {
      "type": "string",
      "metadata": {
        "description": "Folder path where Shared Storage volume will be mounted on Linux VMs.."
      },
      "defaultValue": "/beegfs"
    },
    "nfsScratchExportPath": {
      "type": "string",
      "metadata": {
        "description": "If useNfsStorage is set to 'yes', this parameter with correct values is mandatory. This is the export path configured in your NFS server to be used by Photoscan for project processing."
      },
      "defaultValue": "/data"
    },
    "nfsDnsEntry": {
      "type": "string",
      "metadata": {
        "description": "If useNfsStorage is set to 'yes', this parameter with correct values is mandatory. Format is <DNS A Record for NFS servers>,<IP1>,<IP2>,<IP3>,<IPx>. E.g. vfxt,10.0.0.11,10.0.0.12,10.0.0.13"
      },
      "defaultValue": ""
    },
    "nfsScratchFolderNfsVersion": {
      "type": "string",
      "metadata": {
        "description": "NFS Version used to mount scratch (data) folder. Will be used only when NFS storage is in use."
      },
      "defaultValue": "nfs",
      "allowedValues": [
        "nfs",
        "nfs4"
      ]
    },
    "nfsHomeFolderNfsVersion": {
      "type": "string",
      "metadata": {
        "description": "NFS Version used to mount home folder for HPC User. When using BeeGFS, this value must be nfs4, if using Avere vFXT it must be nfs."
      },
      "defaultValue": "nfs",
      "allowedValues": [
        "nfs",
        "nfs4"
      ]
    },
    "nfsScratchMountOptions": {
      "type": "string",
      "metadata": {
        "description": "NFS scracth volumne mount options, comma separated, no spaces. E.g. noatime,rsize=524288,wsize=524288."
      },
      "defaultValue": "defaults"
    },
    "nfsExportPathUNC": {
      "type": "string",
      "metadata": {
        "description": "UNC NFS Export path, this value is used by Windows Scheduler (Head) to map the NFS path to a drive letter when using NFS storage. E.g. \\\\vfxt\\!\\msazure"
      },
      "defaultValue": "\\\\vfxt\\!\\msazure"
    },
    "nfsMountType": {
      "type": "string",
      "metadata": {
        "description": "Type of NFS mounts, hard or soft."
      },
      "allowedValues": [
        "hard",
        "soft"
      ],
      "defaultValue": "hard"
    },
    "nfsMapDriveLetter": {
      "type": "string",
      "metadata": {
        "description": "Drive letter where nfsExportPathUNC will be mapped to."
      },
      "defaultValue": "z:"
    },
    "nfsCaseSensitiveLookup": {
      "type": "bool",
      "metadata": {
        "description": "Sets that NFS will use case sensitive lookups."
      },
      "defaultValue": false
    },
    "nfsTimeout": {
      "type": "int",
      "metadata": {
        "description": "NFS timeout."
      },
      "defaultValue": 60,
      "maxValue": 60
    },
    "nfsMountRetry": {
      "type": "int",
      "metadata": {
        "description": "NFS mount retries."
      },
      "defaultValue": 3
    },
    "nfsDefaultAccessMode": {
      "type": "int",
      "metadata": {
        "description": "NFS default access mode."
      },
      "defaultValue": 777
    },
    "nfsWindowsRsizeKb": {
      "type": "int",
      "metadata": {
        "description": "Windows NFS Client read size in KB."
      },
      "defaultValue": 64,
      "maxValue": 64
    },
    "nfsWindowsWsizeKb": {
      "type": "int",
      "metadata": {
        "description": "Windows NFS Client write size in KB."
      },
      "defaultValue": 64,
      "maxValue": 64
    },
    "beeGfsMasterName": {
      "type": "string",
      "defaultValue": "beegfsmaster",
      "metadata": {
        "description": "BeeGFS Master node VM name (single label)"
      }
    },
    "beeGfsMasterIpAddress": {
      "type": "string",
      "defaultValue": "192.168.0.4",
      "metadata": {
        "description": "BeeGFS Master Ip address, this will be added as an A record on DNS."
      }
    },
    "beeGfsSmbServersVip": {
      "type": "string",
      "defaultValue": "192.168.0.55",
      "metadata": {
        "description": "Ip Address of the BeeGFS SMB clients Load Balancer,this will be added as an A record on DNS."
      }
    },
    "beeGfsSmbServerARecordName": {
      "type": "string",
      "defaultValue": "beegfs",
      "metadata": {
        "description": "BeeGFS A record to be used by Photoscan Server (Head)."
      }
    },
    "hpcUser": {
      "type": "string",
      "defaultValue": "hpcuser",
      "metadata": {
        "description": "Hpc user that will be owner of all files in the hpc folder structure."
      }
    },
    "hpcUid": {
      "type": "int",
      "defaultValue": 7007,
      "metadata": {
        "description": "Hpc User ID."
      }
    },
    "hpcGroup": {
      "type": "string",
      "defaultValue": "hpcgroup",
      "metadata": {
        "description": "Hpc Group."
      }
    },
    "hpcGid": {
      "type": "int",
      "defaultValue": 7007,
      "metadata": {
        "description": "Hpc Group ID."
      }
    }
  },
  "variables": {
    "baseUrl": "[parameters('_artifactsLocation')]",
    "libraryBaseUrl": "[parameters('_artifactsLocation')]",
    "deploymentUniqueString": "[uniqueString(concat(deployment().name,resourceGroup().id))]",
    "deploymentConfig": {
      "libraryBaseUrl": "[variables('libraryBaseUrl')]",
      "sasToken": "[parameters('_artifactsLocationSasToken')]",
      "libraryItems": {
        "getRefUri": "[concat(variables('libraryBaseUrl'),'/_library/other/getReference.json',parameters('_artifactsLocationSasToken'))]",
        "updateVnetDnsUri": "[concat(variables('libraryBaseUrl'),'/_library/other/updateVnetDnsSettings.json',parameters('_artifactsLocationSasToken'))]",
        "updateVmDnsUri": "[concat(variables('libraryBaseUrl'),'/_library/other/updateVmDnsSettings.json',parameters('_artifactsLocationSasToken'))]",
        "changeVmPrivateIpAddressTypeUri": "[concat(variables('libraryBaseUrl'),'/_library/other/changeVmIpAddressType.json',parameters('_artifactsLocationSasToken'))]",
        "avSetBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Compute/availabilitySet.json',parameters('_artifactsLocationSasToken'))]",
        "vmBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Compute/virtualMachine.json',parameters('_artifactsLocationSasToken'))]",
        "vmLinuxBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Compute/virtualMachineLinux.json',parameters('_artifactsLocationSasToken'))]",
        "vmExtensionBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Compute/vmExtension.json',parameters('_artifactsLocationSasToken'))]",
        "vNetBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/virtualNetwork.json',parameters('_artifactsLocationSasToken'))]",
        "nicBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/networkInterface.json',parameters('_artifactsLocationSasToken'))]",
        "nsgBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/networkSecurityGroup.json',parameters('_artifactsLocationSasToken'))]",
        "publicIpAddressBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/publicIp.json',parameters('_artifactsLocationSasToken'))]",
        "lbBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/loadBalancer.json',parameters('_artifactsLocationSasToken'))]",
        "vpnGatewayBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/vpnGateway.json',parameters('_artifactsLocationSasToken'))]",
        "s2sConnectionBuildingBlockUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/vnet2VnetConnection.json',parameters('_artifactsLocationSasToken'))]",
        "joinVmToDomainUri": "[concat(variables('libraryBaseUrl'),'/_library/other/joinVmToDomain.json',parameters('_artifactsLocationSasToken'))]",
        "applicationGatewayUri": "[concat(variables('libraryBaseUrl'),'/_library/Microsoft.Network/applicationGateway.json',parameters('_artifactsLocationSasToken'))]"
      },
      "apiVersions": {
        "nicApiVersion": "2017-06-01",
        "deploymentApiVersion": "2017-05-10",
        "vmApiVersion": "2017-03-30",
        "publicIpApiVersion": "2017-11-01",
        "vnetApiVersion": "2018-07-01",
        "nsgApiVersion": "2017-06-01",
        "vmExtensionApiVersion": "2015-06-15",
        "subnetApiVersion": "2017-10-01",
        "applicationGwApiVersion": "2017-10-01",
        "availabilitySetApiVersion": "2017-03-30",
        "vnetPeeringApiVersion": "2016-06-01"
      }
    },
    "networkingUrl": "[concat(variables('baseUrl'),'/common/networking.json',parameters('_artifactsLocationSasToken'))]",
    "jumpBoxUrl": "[concat(variables('baseUrl'),'/common/jumpbox.json',parameters('_artifactsLocationSasToken'))]",
    "activeDirectoryUrl": "[concat(variables('baseUrl'),'/common/activeDirectory.json',parameters('_artifactsLocationSasToken'))]",
    "photoscanHeadUrl": "[concat(variables('baseUrl'),'/photoscanHead.json',parameters('_artifactsLocationSasToken'))]",
    "photoscanLinuxNodesUrl": "[concat(variables('baseUrl'),'/photoscanLinuxNodes.json',parameters('_artifactsLocationSasToken'))]",
    "photoscanWindowsNodesUrl": "[concat(variables('baseUrl'),'/photoscanWindowsNodes.json',parameters('_artifactsLocationSasToken'))]",
    "useBeeGfsStorageUrl": "[concat(variables('baseUrl'),'/useBeeGfsStorage.json',parameters('_artifactsLocationSasToken'))]",
    "useNfsStorageUrl":"[concat(variables('baseUrl'),'/useNfsStorage.json',parameters('_artifactsLocationSasToken'))]",
    "resourceGroups": {
      "networkingRg": "[if(equals(parameters('useSingleResourceGroup'),'yes'),resourceGroup().Name, 'photoscan-rg')]",
      "jumpBoxRg": "[if(equals(parameters('useSingleResourceGroup'),'yes'), resourceGroup().Name, 'photoscan-rg')]",
      "adRg": "[if(equals(parameters('useSingleResourceGroup'),'yes'), resourceGroup().Name, 'photoscan-rg')]",
      "photoscanRg": "[if(equals(parameters('useSingleResourceGroup'),'yes'), resourceGroup().Name, 'photoscan-rg')]"
    },
    "hpcUserNfsHostName": "[if(equals(parameters('useBeeGfsStorage'),'yes'),parameters('beeGfsMasterName'),split(parameters('nfsDnsEntry'),',')[0])]"
  },
  "resources": [
    {
      "condition": true,
      "comments": "Virtual network deployment",
      "name": "[concat(variables('deploymentUniqueString'),'-Networking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').networkingRg]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkingUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetAdressSpace": {
            "value": "[parameters('vnetAdressSpace')]"
          },
          "jumpboxSubnetName": {
            "value": "[parameters('jumpboxSubnetName')]"
          },
          "jumpboxSubnetAdressPrefix": {
            "value": "[parameters('jumpboxSubnetAdressPrefix')]"
          },
          "photoscanSubnetName": {
            "value": "[parameters('photoscanSubnetName')]"
          },
          "photoscanSubnetAdressPrefix": {
            "value": "[parameters('photoscanSubnetAdressPrefix')]"
          },
          "adSubnetName": {
            "value": "[parameters('adSubnetName')]"
          },
          "adSubnetAdressPrefix": {
            "value": "[parameters('adSubnetAdressPrefix')]"
          }
        }
      }
    },
    {
      "condition": true,
      "comments": "Active Directory Forest Deployment",
      "name": "[concat(variables('deploymentUniqueString'),'-AD')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').adRg]",
      "dependsOn": [
        "[concat(variables('deploymentUniqueString'),'-Networking')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('activeDirectoryUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "adSubnetName": {
            "value": "[parameters('adSubnetName')]"
          },
          "dc1Name": {
            "value": "[parameters('dc1Name')]"
          },
          "dc2Name": {
            "value": "[parameters('dc2Name')]"
          },
          "dc1IpAddress": {
            "value": "[parameters('dc1IpAddress')]"
          },
          "dc2IpAddress": {
            "value": "[parameters('dc2IpAddress')]"
          },
          "dcVmSize": {
            "value": "[parameters('dcVmSize')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "dnsDomainName": {
            "value": "[parameters('dnsDomainName')]"
          },
          "adDomainNetBIOSName": {
            "value": "[parameters('adDomainNetBIOSName')]"
          },
          "vnetRg": {
            "value": "[variables('resourceGroups').networkingRg]"
          },
          "beeGfsSmbServersVip": {
            "value": "[parameters('beeGfsSmbServersVip')]"
          },
          "beeGfsSmbServerARecordName": {
            "value": "[parameters('beeGfsSmbServerARecordName')]"
          },
          "beeGfsMasterName": {
            "value": "[parameters('beeGfsMasterName')]"
          },
          "beeGfsMasterIpAddress": {
            "value": "[parameters('beeGfsMasterIpAddress')]"
          },
          "useNfsStorage": {
            "value": "[parameters('useNfsStorage')]"
          },
          "nfsDnsEntry": {
            "value": "[parameters('nfsDnsEntry')]"
          }
        }
      }
    },
    {
      "condition": true,
      "comments": "Jumpbox Deployment",
      "name": "[concat(variables('deploymentUniqueString'),'-Jumpbox')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').jumpBoxRg]",
      "dependsOn": [
        "[concat(variables('deploymentUniqueString'),'-AD')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('jumpBoxUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "dnsDomainName": {
            "value": "[parameters('dnsDomainName')]"
          },
          "adDomainNetBIOSName": {
            "value": "[parameters('adDomainNetBIOSName')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "vnetRg": {
            "value": "[variables('resourceGroups').networkingRg]"
          },
          "sshKeyData": {
            "value": "[parameters('sshKeyData')]"
          },
          "deployLinuxJumpbox": {
            "value": "[parameters('deployLinuxJumpbox')]"
          },
          "windowsJumpboxVmName": {
            "value": "[parameters('windowsJumpboxVmName')]"
          },
          "linuxJumpboxVmName": {
            "value": "[parameters('linuxJumpboxVmName')]"
          },
          "windowsJumpboxVmSize": {
            "value": "[parameters('windowsJumpboxVmSize')]"
          },
          "linuxJumpboxVmSize": {
            "value": "[parameters('linuxJumpboxVmSize')]"
          },
          "windowsJumpboxIpAddress": {
            "value": "[parameters('windowsJumpboxIpAddress')]"
          },
          "linuxJumpboxIpAddress": {
            "value": "[parameters('linuxJumpboxIpAddress')]"
          },
          "jumpboxSubnetName": {
            "value": "[parameters('jumpboxSubnetName')]"
          }
        }
      }
    },
    {
      "condition": true,
      "comments": "Windows Photoscan Head Deployment",
      "name": "[concat(variables('deploymentUniqueString'),'-Head')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').photoscanRg]",
      "dependsOn": [
        "[concat(variables('deploymentUniqueString'),'-AD')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('photoscanHeadUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetRg": {
            "value": "[variables('resourceGroups').networkingRg]"
          },
          "photoscanSubnetName": {
            "value": "[parameters('photoscanSubnetName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "headServerName": {
            "value": "[parameters('headServerName')]"
          },
          "dnsDomainName": {
            "value": "[parameters('dnsDomainName')]"
          },
          "adDomainNetBIOSName": {
            "value": "[parameters('adDomainNetBIOSName')]"
          },
          "activationCode": {
            "value": "[parameters('activationCode')]"
          },
          "headRoot": {
            "value": "[parameters('headRoot')]"
          },
          "dispatch": {
            "value": "[parameters('dispatch')]"
          },
          "headVmSize": {
            "value": "[parameters('headVmSize')]"
          },
          "photoscanAbsolutePaths": {
            "value": "[parameters('photoscanAbsolutePaths')]"
          },
          "windowsPhotoscanDownloadUrl": {
            "value": "[parameters('windowsPhotoscanDownloadUrl')]"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('workerNodesType'),'linux')]",
      "comments": "Linux Photoscan Nodes Deployment",
      "name": "[if(equals(parameters('workerNodesType'),'linux'),concat(variables('deploymentUniqueString'),'-LinuxNodes'),concat(variables('deploymentUniqueString'),'-LinuxNodes-Invalid'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').photoscanRg]",
      "dependsOn": [
        "[concat(variables('deploymentUniqueString'),'-AD')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('photoscanLinuxNodesUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetRg": {
            "value": "[variables('resourceGroups').networkingRg]"
          },
          "photoscanSubnetName": {
            "value": "[parameters('photoscanSubnetName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "dnsDomainName": {
            "value": "[parameters('dnsDomainName')]"
          },
          "sshKeyData": {
            "value": "[parameters('sshKeyData')]"
          },
          "activationCode": {
            "value": "[parameters('activationCode')]"
          },
          "nodeNameSuffix": {
            "value": "[parameters('nodeNameSuffix')]"
          },
          "nodeRoot": {
            "value": "[parameters('nodeRoot')]"
          },
          "nodeSubnetIpAddressSuffix": {
            "value": "[parameters('nodeSubnetIpAddressSuffix')]"
          },
          "nodeStartIpAddress": {
            "value": "[parameters('nodeStartIpAddress')]"
          },
          "dispatch": {
            "value": "[parameters('dispatch')]"
          },
          "gpuMask": {
            "value": "[parameters('gpuMask')]"
          },
          "nodeCount": {
            "value": "[parameters('nodeCount')]"
          },
          "nodeVmSize": {
            "value": "[parameters('nodeVmSize')]"
          },
          "linuxPhotoscanDownloadUrl": {
            "value": "[parameters('linuxPhotoscanDownloadUrl')]"
          },
          "photoscanInstallPath": {
            "value": "[parameters('photoscanInstallPath')]"
          },
          "photoscanAbsolutePaths": {
            "value": "[parameters('photoscanAbsolutePaths')]"
          },
          "hpcUser": {
            "value": "[parameters('hpcUser')]"
          },
          "hpcUid":{
            "value":"[parameters('hpcUid')]"
          },
          "hpcGroup": {
            "value": "[parameters('hpcGroup')]"
          },
          "hpcGid":{
            "value":"[parameters('hpcGid')]"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('workerNodesType'),'windows')]",
      "comments": "Windows Photoscan Nodes Deployment",
      "name": "[if(equals(parameters('workerNodesType'),'windows'),concat(variables('deploymentUniqueString'),'-WindowsNodes'),concat(variables('deploymentUniqueString'),'-WindowsNodes-Invalid'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').photoscanRg]",
      "dependsOn": [
        "[concat(variables('deploymentUniqueString'),'-AD')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('photoscanWindowsNodesUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetRg": {
            "value": "[variables('resourceGroups').networkingRg]"
          },
          "photoscanSubnetName": {
            "value": "[parameters('photoscanSubnetName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "dnsDomainName": {
            "value": "[parameters('dnsDomainName')]"
          },
          "adDomainNetBIOSName": {
            "value": "[parameters('adDomainNetBIOSName')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "activationCode": {
            "value": "[parameters('activationCode')]"
          },
          "nodeNameSuffix": {
            "value": "[parameters('nodeNameSuffix')]"
          },
          "nodeRoot": {
            "value": "[parameters('nodeRoot')]"
          },
          "nodeSubnetIpAddressSuffix": {
            "value": "[parameters('nodeSubnetIpAddressSuffix')]"
          },
          "nodeStartIpAddress": {
            "value": "[parameters('nodeStartIpAddress')]"
          },
          "dispatch": {
            "value": "[parameters('dispatch')]"
          },
          "gpuMask": {
            "value": "[parameters('gpuMask')]"
          },
          "nodeCount": {
            "value": "[parameters('nodeCount')]"
          },
          "nodeVmSize": {
            "value": "[parameters('nodeVmSize')]"
          },
          "windowsPhotoscanDownloadUrl": {
            "value": "[parameters('windowsPhotoscanDownloadUrl')]"
          },
          "photoscanAbsolutePaths": {
            "value": "[parameters('photoscanAbsolutePaths')]"
          },
          "hpcUser": {
            "value": "[parameters('hpcUser')]"
          },
          "hpcGroup": {
            "value": "[parameters('hpcGroup')]"
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('useBeeGfsStorage'),'yes'), and(equals(parameters('workerNodesType'),'linux'),equals(parameters('useNfsStorage'),'no')))]",
      "comments": "Configure Linux Nodes to use BeeGFS",
      "name": "[concat(variables('deploymentUniqueString'),'-nodes-attach-BeeGFS')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').photoscanRg]",
      "dependsOn": [
        "[if(equals(parameters('workerNodesType'),'linux'),concat(variables('deploymentUniqueString'),'-LinuxNodes'),concat(variables('deploymentUniqueString'),'-LinuxNodes-Invalid'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('useBeeGfsStorageUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "nodeNameSuffix": {
            "value": "[parameters('nodeNameSuffix')]"
          },
          "nodeCount": {
            "value": "[parameters('nodeCount')]"
          },
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetRg": {
            "value": "[variables('resourceGroups').networkingRg]"
          },
          "storageVnetRG": {
            "value": "[parameters('storageVnetRG')]"
          },
          "storageVnetName": {
            "value": "[parameters('storageVnetName')]"
          },
          "beeGfsMasterName": {
            "value": "[parameters('beeGfsMasterName')]"
          },
          "sharedScracthMountPoint": {
            "value": "[parameters('sharedScracthMountPoint')]"
          },
          "sharedNfsStorageHpcUserHomeFolder": {
            "value": "[parameters('sharedNfsStorageHpcUserHomeFolder')]"
          },
          "homeNfsExportPath": {
            "value": "[parameters('homeNfsExportPath')]"
          },
          "hpcUser": {
            "value": "[parameters('hpcUser')]"
          },
          "hpcGroup": {
            "value": "[parameters('hpcGroup')]"
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('useNfsStorage'),'yes'), and(equals(parameters('workerNodesType'),'linux'),equals(parameters('useBeeGfsStorage'),'no')))]",
      "comments": "Configure Linux Nodes to use NFS",
      "name": "[concat(variables('deploymentUniqueString'),'-nodes-attach-NFS')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentConfig').apiVersions.deploymentApiVersion]",
      "resourceGroup": "[variables('resourceGroups').photoscanRg]",
      "dependsOn": [
        "[if(equals(parameters('workerNodesType'),'linux'),concat(variables('deploymentUniqueString'),'-LinuxNodes'),concat(variables('deploymentUniqueString'),'-LinuxNodes-Invalid'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('useNfsStorageUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "_artifactsLocation": {
            "value": "[parameters('_artifactsLocation')]"
          },
          "_artifactsLocationSasToken": {
            "value": "[parameters('_artifactsLocationSasToken')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "nodeNameSuffix": {
            "value": "[parameters('nodeNameSuffix')]"
          },
          "nodeCount": {
            "value": "[parameters('nodeCount')]"
          },
          "deploymentConfig": {
            "value": "[variables('deploymentConfig')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetRg": {
            "value": "[variables('resourceGroups').networkingRg]"
          },
          "headServerName":{
            "value":"[parameters('headServerName')]"
          },
          "storageVnetRG": {
            "value": "[parameters('storageVnetRG')]"
          },
          "storageVnetName": {
            "value": "[parameters('storageVnetName')]"
          },
          "sharedScracthMountPoint": {
            "value": "[parameters('sharedScracthMountPoint')]"
          },
          "sharedNfsStorageHpcUserHomeFolder": {
            "value": "[parameters('sharedNfsStorageHpcUserHomeFolder')]"
          },
          "nfsScratchExportPath":{
            "value":"[parameters('nfsScratchExportPath')]"
          },
          "homeNfsExportPath": {
            "value": "[parameters('homeNfsExportPath')]"
          },
          "nfsMapDriveLetter": {
            "value":"[parameters('nfsMapDriveLetter')]"
          },
          "nfsExportPathUNC" :{
            "value":"[parameters('nfsExportPathUNC')]"
          },
          "nfsMountType": {
            "value":"[parameters('nfsMountType')]"
          },
          "nfsScratchFolderNfsVersion": {
            "value":"[parameters('nfsScratchFolderNfsVersion')]"
          },
          "nfsHomeFolderNfsVersion": {
            "value":"[parameters('nfsHomeFolderNfsVersion')]"
          },
          "nfsScratchMountOptions": {
            "value":"[parameters('nfsScratchMountOptions')]"
          },
          "nfsCaseSensitiveLookup":{
            "value":"[parameters('nfsCaseSensitiveLookup')]"
          },
          "nfsTimeout":{
            "value":"[parameters('nfsTimeout')]"
          },
          "nfsMountRetry":{
            "value":"[parameters('nfsMountRetry')]"
          },
          "nfsDefaultAccessMode":{
            "value":"[parameters('nfsDefaultAccessMode')]"
          },
          "nfsWindowsRsizeKb":{
            "value":"[parameters('nfsWindowsRsizeKb')]"
          },
          "nfsWindowsWsizeKb":{
            "value":"[parameters('nfsWindowsWsizeKb')]"
          },
          "nfsDnsEntry": {
            "value":"[parameters('nfsDnsEntry')]"
          },
          "hpcUser": {
            "value": "[parameters('hpcUser')]"
          },
          "hpcGroup": {
            "value": "[parameters('hpcGroup')]"
          },
          "hpcUid":{
            "value":"[parameters('hpcUid')]"
          },
          "hpcGid":{
            "value":"[parameters('hpcGid')]"
          }
        }
      }
    }
  ],
  "outputs": {}
}